{
	"info": {
		"_postman_id": "tsp-solver-complete-api-collection",
		"name": "TSP Solver API - Complete Test Suite",
		"description": "Complete API collection for the Travelling Salesman Problem Solver backend. Tests all endpoints with verified working examples, comprehensive error handling, and automatic test assertions. Ready to import and run with all test data included.\n\n**Quick Start:**\n1. Import this collection into Postman\n2. Run the entire collection or individual requests\n3. All tests include assertions and will pass with a running backend at localhost:8080\n\n**Test Coverage:**\n- ‚úÖ Health check\n- ‚úÖ File upload (small, medium, invalid)\n- ‚úÖ Address upload with geocoding\n- ‚úÖ Algorithm selection (exact, heuristic, metaheuristic)\n- ‚úÖ TSP solving with all algorithms\n- ‚úÖ Solution retrieval and management\n- ‚úÖ Error handling (404, 400, validation)\n- ‚úÖ Performance verification\n\n**Algorithms Tested:**\n- ExactTSPSolver: BRUTE_FORCE, DYNAMIC_PROGRAMMING (‚â§10 points)\n- HeuristicTSPSolver: NEAREST_NEIGHBOR_2OPT (11-25 points)\n- MetaheuristicTSPSolver: SIMULATED_ANNEALING (26+ points)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "tsp-api-complete-v2"
	},
	"item": [
		{
			"name": "üü¢ Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/actuator/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"actuator",
						"health"
					]
				},
				"description": "Check if the Spring Boot application is running and healthy. Returns JSON with application status and component health."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Health check - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Health check - Response is JSON', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('json');",
							"});",
							"",
							"pm.test('‚úÖ Health check - Status is UP', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('UP');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üìÅ Upload Small Coordinate File (5 points)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "0,0\n3,4\n6,0\n3,-4\n-3,2",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/tsp/upload",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"upload"
					]
				},
				"description": "Upload a coordinate file with 5 points. Expected to use ExactTSPSolver (BRUTE_FORCE or DYNAMIC_PROGRAMMING).\n\n**Test File Content:**\n```\n0,0\n3,4\n6,0\n3,-4\n-3,2\n```\n\n**Expected Behavior:**\n- Algorithm: BRUTE_FORCE (‚â§10 points)\n- Performance: <1ms\n- Quality: Mathematically optimal solution"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Small file upload - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Small file upload - Response has ID', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.environment.set('smallFileId', responseJson.id);",
							"    console.log('üîë Small file ID saved:', responseJson.id);",
							"});",
							"",
							"pm.test('‚úÖ Small file upload - Point count is 5', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.pointCount).to.eql(5);",
							"});",
							"",
							"pm.test('‚úÖ Small file upload - Status is UPLOADED', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('UPLOADED');",
							"});",
							"",
							"pm.test('‚úÖ Small file upload - Real world demo is false', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.realWorldDemo).to.eql(false);",
							"});",
							"",
							"pm.test('‚úÖ Small file upload - Has creation timestamp', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('createdAt');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set Content-Type to simulate file upload",
							"pm.request.headers.add({",
							"    key: 'Content-Type',",
							"    value: 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'",
							"});",
							"",
							"// Create multipart form data for file upload",
							"const boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW';",
							"const fileContent = '0,0\\n3,4\\n6,0\\n3,-4\\n-3,2';",
							"",
							"const body = [",
							"    `--${boundary}`,",
							"    'Content-Disposition: form-data; name=\"file\"; filename=\"small_test.txt\"',",
							"    'Content-Type: text/plain',",
							"    '',",
							"    fileContent,",
							"    `--${boundary}--`",
							"].join('\\r\\n');",
							"",
							"pm.request.body.raw = body;"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üìÅ Upload Medium Coordinate File (15 points)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "0,0\n10,10\n20,5\n15,15\n5,20\n25,25\n30,10\n12,8\n18,22\n7,15\n22,18\n28,5\n9,25\n16,3\n4,12",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/tsp/upload",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"upload"
					]
				},
				"description": "Upload a coordinate file with 15 points. Expected to use HeuristicTSPSolver (NEAREST_NEIGHBOR_2OPT).\n\n**Test File Content:**\n```\n0,0\n10,10\n20,5\n15,15\n5,20\n25,25\n30,10\n12,8\n18,22\n7,15\n22,18\n28,5\n9,25\n16,3\n4,12\n```\n\n**Expected Behavior:**\n- Algorithm: NEAREST_NEIGHBOR_2OPT (11-25 points)\n- Performance: <5ms\n- Quality: Good heuristic solution"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Medium file upload - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Medium file upload - Response has ID', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.environment.set('mediumFileId', responseJson.id);",
							"    console.log('üîë Medium file ID saved:', responseJson.id);",
							"});",
							"",
							"pm.test('‚úÖ Medium file upload - Point count is 15', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.pointCount).to.eql(15);",
							"});",
							"",
							"pm.test('‚úÖ Medium file upload - Status is UPLOADED', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('UPLOADED');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set Content-Type to simulate file upload",
							"pm.request.headers.add({",
							"    key: 'Content-Type',",
							"    value: 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'",
							"});",
							"",
							"// Create multipart form data for file upload",
							"const boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW';",
							"const fileContent = '0,0\\n10,10\\n20,5\\n15,15\\n5,20\\n25,25\\n30,10\\n12,8\\n18,22\\n7,15\\n22,18\\n28,5\\n9,25\\n16,3\\n4,12';",
							"",
							"const body = [",
							"    `--${boundary}`,",
							"    'Content-Disposition: form-data; name=\"file\"; filename=\"medium_test.txt\"',",
							"    'Content-Type: text/plain',",
							"    '',",
							"    fileContent,",
							"    `--${boundary}--`",
							"].join('\\r\\n');",
							"",
							"pm.request.body.raw = body;"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üåç Upload Real-World Addresses",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"addresses\": [\n    \"New York, NY\",\n    \"Los Angeles, CA\",\n    \"Chicago, IL\",\n    \"Houston, TX\",\n    \"Phoenix, AZ\"\n  ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/tsp/upload-addresses",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"upload-addresses"
					]
				},
				"description": "Upload real-world addresses for the Google Maps integration demo. Tests the address geocoding functionality.\n\n**Expected Behavior:**\n- Status: GEOCODED\n- Real world demo: true\n- Creates placeholder coordinates (demo mode)\n- Can be solved with any algorithm based on point count"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Address upload - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Address upload - Response has ID', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.environment.set('addressesId', responseJson.id);",
							"    console.log('üîë Addresses ID saved:', responseJson.id);",
							"});",
							"",
							"pm.test('‚úÖ Address upload - Status is GEOCODED', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('GEOCODED');",
							"});",
							"",
							"pm.test('‚úÖ Address upload - Real world demo flag is true', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.realWorldDemo).to.eql(true);",
							"});",
							"",
							"pm.test('‚úÖ Address upload - Has addresses array', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('addresses');",
							"    pm.expect(responseJson.addresses).to.be.an('array');",
							"    pm.expect(responseJson.addresses.length).to.be.above(0);",
							"});",
							"",
							"pm.test('‚úÖ Address upload - Point count matches addresses', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.pointCount).to.eql(responseJson.addresses.length);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üéØ Solve Small TSP (Exact Algorithm)",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/{{smallFileId}}/solve",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"{{smallFileId}}",
						"solve"
					]
				},
				"description": "Solve the small TSP problem (5 points) using automatic algorithm selection. Should use ExactTSPSolver for mathematically optimal results.\n\n**Expected Results:**\n- Algorithm: BRUTE_FORCE or DYNAMIC_PROGRAMMING\n- Execution time: <1ms\n- Status: SOLVED\n- Route: Complete tour visiting all 5 points\n- Quality: Mathematically optimal"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Small TSP solve - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Small TSP solve - Status is SOLVED', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('SOLVED');",
							"});",
							"",
							"pm.test('‚úÖ Small TSP solve - Algorithm is exact', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.algorithm).to.match(/BRUTE_FORCE|DYNAMIC_PROGRAMMING/);",
							"    console.log('üî¨ Algorithm used:', responseJson.algorithm);",
							"});",
							"",
							"pm.test('‚úÖ Small TSP solve - Has route with correct length', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.route).to.have.lengthOf(5);",
							"});",
							"",
							"pm.test('‚úÖ Small TSP solve - Total distance is positive', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.totalDistance).to.be.above(0);",
							"    console.log('üìè Total distance:', responseJson.totalDistance);",
							"});",
							"",
							"pm.test('‚úÖ Small TSP solve - Execution time is fast (<1000ms)', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.executionTimeMs).to.be.below(1000);",
							"    console.log('‚è±Ô∏è Execution time:', responseJson.executionTimeMs + 'ms');",
							"});",
							"",
							"pm.test('‚úÖ Small TSP solve - Route has proper structure', function () {",
							"    const responseJson = pm.response.json();",
							"    responseJson.route.forEach((point, index) => {",
							"        pm.expect(point).to.have.property('order');",
							"        pm.expect(point.order).to.eql(index);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üéØ Solve Medium TSP (Heuristic Algorithm)",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/{{mediumFileId}}/solve",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"{{mediumFileId}}",
						"solve"
					]
				},
				"description": "Solve the medium TSP problem (15 points) using automatic algorithm selection. Should use HeuristicTSPSolver (Nearest Neighbor + 2-opt).\n\n**Expected Results:**\n- Algorithm: NEAREST_NEIGHBOR_2OPT\n- Execution time: <5ms\n- Status: SOLVED\n- Route: Complete tour visiting all 15 points\n- Quality: Good heuristic solution"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Medium TSP solve - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Medium TSP solve - Status is SOLVED', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('SOLVED');",
							"});",
							"",
							"pm.test('‚úÖ Medium TSP solve - Algorithm is heuristic', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.algorithm).to.eql('NEAREST_NEIGHBOR_2OPT');",
							"    console.log('üî¨ Algorithm used:', responseJson.algorithm);",
							"});",
							"",
							"pm.test('‚úÖ Medium TSP solve - Has route with correct length', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.route).to.have.lengthOf(15);",
							"});",
							"",
							"pm.test('‚úÖ Medium TSP solve - Total distance is positive', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.totalDistance).to.be.above(0);",
							"    console.log('üìè Total distance:', responseJson.totalDistance);",
							"});",
							"",
							"pm.test('‚úÖ Medium TSP solve - Execution time is reasonable (<5000ms)', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.executionTimeMs).to.be.below(5000);",
							"    console.log('‚è±Ô∏è Execution time:', responseJson.executionTimeMs + 'ms');",
							"});",
							"",
							"pm.test('‚úÖ Medium TSP solve - Performance meets requirements', function () {",
							"    const responseJson = pm.response.json();",
							"    // Should be much faster than 5s requirement",
							"    pm.expect(responseJson.executionTimeMs).to.be.below(100);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üåç Solve Address-Based TSP",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/{{addressesId}}/solve",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"{{addressesId}}",
						"solve"
					]
				},
				"description": "Solve the real-world addresses TSP. Algorithm selection based on point count.\n\n**Expected Results:**\n- Algorithm: Based on number of addresses (likely BRUTE_FORCE for 5 addresses)\n- Status: SOLVED\n- Real world demo: true\n- Route includes address information"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Address TSP solve - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Address TSP solve - Status is SOLVED', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('SOLVED');",
							"});",
							"",
							"pm.test('‚úÖ Address TSP solve - Real world demo maintained', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.realWorldDemo).to.eql(true);",
							"});",
							"",
							"pm.test('‚úÖ Address TSP solve - Has addresses in solution', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.addresses).to.be.an('array');",
							"    pm.expect(responseJson.addresses.length).to.be.above(0);",
							"});",
							"",
							"pm.test('‚úÖ Address TSP solve - Algorithm selected appropriately', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.algorithm).to.be.oneOf(['BRUTE_FORCE', 'DYNAMIC_PROGRAMMING', 'NEAREST_NEIGHBOR_2OPT', 'SIMULATED_ANNEALING']);",
							"    console.log('üî¨ Algorithm used for addresses:', responseJson.algorithm);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üîß Solve TSP with Manual Algorithm Override",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/{{smallFileId}}/solve?algorithm=heuristic&maxTime=30",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"{{smallFileId}}",
						"solve"
					],
					"query": [
						{
							"key": "algorithm",
							"value": "heuristic",
							"description": "Force use of heuristic algorithm"
						},
						{
							"key": "maxTime",
							"value": "30",
							"description": "Maximum solving time in seconds"
						}
					]
				},
				"description": "Solve TSP with manually specified algorithm (override automatic selection). This forces the use of heuristic solver even for small problems.\n\n**Parameters:**\n- algorithm=heuristic: Force use of NEAREST_NEIGHBOR_2OPT\n- maxTime=30: Set timeout to 30 seconds\n\n**Expected Results:**\n- Algorithm: NEAREST_NEIGHBOR_2OPT (forced)\n- Shows algorithm override works correctly"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Manual algorithm - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Manual algorithm - Algorithm matches requested', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.algorithm).to.eql('NEAREST_NEIGHBOR_2OPT');",
							"    console.log('üîß Forced algorithm:', responseJson.algorithm);",
							"});",
							"",
							"pm.test('‚úÖ Manual algorithm - Status is SOLVED', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('SOLVED');",
							"});",
							"",
							"pm.test('‚úÖ Manual algorithm - Respects time limit', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.executionTimeMs).to.be.below(30000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üìã Get Solution by ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/{{smallFileId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"{{smallFileId}}"
					]
				},
				"description": "Retrieve a specific TSP solution by its ID. Shows complete solution details including route, distance, algorithm used, and performance metrics."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Get solution - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Get solution - Response has complete data', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('status');",
							"    pm.expect(responseJson).to.have.property('pointCount');",
							"    pm.expect(responseJson).to.have.property('algorithm');",
							"    pm.expect(responseJson).to.have.property('totalDistance');",
							"    pm.expect(responseJson).to.have.property('executionTimeMs');",
							"});",
							"",
							"pm.test('‚úÖ Get solution - Solution is solved', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.status).to.eql('SOLVED');",
							"});",
							"",
							"pm.test('‚úÖ Get solution - Has route data', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.route).to.be.an('array');",
							"    pm.expect(responseJson.route.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üìã Get All Solutions",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp"
					]
				},
				"description": "Get all TSP solutions stored in the system. Useful for listing and managing multiple problems and their solutions. Returns paginated list with solution summaries."
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Get all solutions - Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('‚úÖ Get all solutions - Response has solutions array', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('solutions');",
							"    pm.expect(responseJson.solutions).to.be.an('array');",
							"});",
							"",
							"pm.test('‚úÖ Get all solutions - Solutions array has data', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.solutions.length).to.be.above(0);",
							"    console.log('üìä Total solutions found:', responseJson.solutions.length);",
							"});",
							"",
							"pm.test('‚úÖ Get all solutions - Each solution has required fields', function () {",
							"    const responseJson = pm.response.json();",
							"    responseJson.solutions.forEach(solution => {",
							"        pm.expect(solution).to.have.property('id');",
							"        pm.expect(solution).to.have.property('status');",
							"        pm.expect(solution).to.have.property('pointCount');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "‚ùå Upload Invalid File (Error Test)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "This is not a valid coordinate file\nInvalid content\nNot x,y format",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/tsp/upload",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"upload"
					]
				},
				"description": "Test error handling by uploading an invalid file. Should return 400 Bad Request with descriptive error message.\n\n**Test Content:** Invalid format that doesn't match x,y coordinate pattern\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Error message describing the format issue"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Invalid file - Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test('‚úÖ Invalid file - Error message returned', function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText).to.match(/invalid|error|expected|format/i);",
							"    console.log('‚ùå Error message:', responseText);",
							"});",
							"",
							"pm.test('‚úÖ Invalid file - Response is not JSON', function () {",
							"    // Error responses are typically plain text",
							"    const contentType = pm.response.headers.get('Content-Type');",
							"    pm.expect(contentType).to.include('text/plain');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set Content-Type to simulate file upload",
							"pm.request.headers.add({",
							"    key: 'Content-Type',",
							"    value: 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'",
							"});",
							"",
							"// Create multipart form data for invalid file",
							"const boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW';",
							"const fileContent = 'This is not a valid coordinate file\\nInvalid content\\nNot x,y format';",
							"",
							"const body = [",
							"    `--${boundary}`,",
							"    'Content-Disposition: form-data; name=\"file\"; filename=\"invalid_test.txt\"',",
							"    'Content-Type: text/plain',",
							"    '',",
							"    fileContent,",
							"    `--${boundary}--`",
							"].join('\\r\\n');",
							"",
							"pm.request.body.raw = body;"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "‚ùå Upload Wrong File Type (Error Test)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "0,0\n1,1\n2,2",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/tsp/upload",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"upload"
					]
				},
				"description": "Test file type validation by uploading valid coordinates but with wrong file extension.\n\n**Expected Response:**\n- Status: 400 Bad Request\n- Error: 'File must be a .txt file'"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Wrong file type - Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test('‚úÖ Wrong file type - Specific error message', function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText).to.include('must be a .txt file');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set Content-Type to simulate CSV file upload",
							"pm.request.headers.add({",
							"    key: 'Content-Type',",
							"    value: 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'",
							"});",
							"",
							"// Create multipart form data with .csv extension",
							"const boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW';",
							"const fileContent = '0,0\\n1,1\\n2,2';",
							"",
							"const body = [",
							"    `--${boundary}`,",
							"    'Content-Disposition: form-data; name=\"file\"; filename=\"test.csv\"',",
							"    'Content-Type: text/csv',",
							"    '',",
							"    fileContent,",
							"    `--${boundary}--`",
							"].join('\\r\\n');",
							"",
							"pm.request.body.raw = body;"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "‚ùå Get Non-existent Solution (404 Test)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/non-existent-id-12345",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"non-existent-id-12345"
					]
				},
				"description": "Test 404 error handling by requesting a solution that doesn't exist.\n\n**Expected Response:**\n- Status: 404 Not Found\n- No response body or appropriate error message"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Non-existent solution - Status code is 404', function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test('‚úÖ Non-existent solution - Response handling', function () {",
							"    // 404 responses may be empty or have error message",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText.length).to.be.at.most(100); // Should be short or empty",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "‚ùå Solve Non-existent TSP (404 Test)",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/non-existent-id-12345/solve",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"non-existent-id-12345",
						"solve"
					]
				},
				"description": "Test error handling when trying to solve a non-existent TSP problem.\n\n**Expected Response:**\n- Status: 404 Not Found"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Solve non-existent - Status code is 404', function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üóëÔ∏è Delete Solution",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/{{mediumFileId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"{{mediumFileId}}"
					]
				},
				"description": "Delete a specific TSP solution by ID. Useful for cleanup and managing storage.\n\n**Expected Response:**\n- Status: 204 No Content\n- Empty response body\n- Solution removed from database"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Delete solution - Status code is 204', function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test('‚úÖ Delete solution - No response body', function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});",
							"",
							"console.log('üóëÔ∏è Medium file solution deleted successfully');"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "üîç Verify Deletion (Should be 404)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/tsp/{{mediumFileId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tsp",
						"{{mediumFileId}}"
					]
				},
				"description": "Verify that the deleted solution is no longer accessible.\n\n**Expected Response:**\n- Status: 404 Not Found\n- Confirms deletion was successful"
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('‚úÖ Verify deletion - Status code is 404', function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"console.log('‚úÖ Deletion verified - solution no longer exists');"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Executing TSP API test: ' + pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"const responseTime = pm.response.responseTime;",
					"if (responseTime > 5000) {",
					"    console.warn('‚ö†Ô∏è Slow response: ' + responseTime + 'ms');",
					"}",
					"",
					"// Log response time for performance tracking",
					"console.log('‚è±Ô∏è Response time: ' + responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "Base URL for the TSP API server. Change to your deployed URL if needed."
		}
	]
}